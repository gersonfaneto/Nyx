#+TITLE:	Minimal
#+AUTHOR:	Gerson Ferreira
#+SUBTITLE:	A simple configuration for Emacs.
#+PROPERTY:	header-args :tangle "~/.emacs.d/init.el"

* Package Archives

#+begin_src elisp
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                          ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                          ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)

  (setq use-package-always-ensure t)
#+end_src

* Navigation and completion

** Vertico

#+begin_src elisp
  (use-package vertico
     :ensure t
     :init (vertico-mode))

  (use-package orderless
     :ensure t
     :custom
     (completion-styles '(orderless basic))
      (completion-category-overrides '((file (styles basic partial-completion)))))
#+end_src

** Consult

#+begin_src elisp
  (use-package consult
    :ensure t
    :bind (
           ("M-s b" . consult-buffer)
           ("M-s g" . consult-grep)
           ("M-s j" . consult-outline)
           ))
#+end_src

* Styling

** Theming

#+begin_src elisp
  (use-package catppuccin-theme
    :ensure t
    :init  (setq catppuccin-flavor 'mocha) ; or 'latte, 'macchiato, or 'mocha
    (load-theme 'catppuccin t))
#+end_src

** Elements

#+begin_src elisp
  (setq
   ;; Disable startup message
   inhibit-startup-message t

   ;; Clear the initial scratch message
   initial-scratch-message nil

   ;; Set Dired listing switches for more minimalist output
   dired-listing-switches "-lhAX --group-directories-first")

  ;; Disable backup files
  make-backup-files nil

  ;; Disable the menu bar
  (menu-bar-mode 0)

  ;; Disable the tool bar
  (tool-bar-mode 0)

  ;; Disable the scroll bar
  (scroll-bar-mode 0)

  ;; Highlight matching parentheses
  (show-paren-mode 1)

  ;; Display cursor location on status bar
  (column-number-mode 1)

  ;; Maximize the frame on startup
  (toggle-frame-maximized)
#+end_src

** Font

#+begin_src elisp
  (set-frame-font "scientifica 18" nil t)
#+end_src

* Behavior

** General

#+begin_src elisp
  ;; Don't touch my 'init.el'!
  (load (setq custom-file (locate-user-emacs-file "custom.el")) t)
#+end_src

** Keys

#+begin_src elisp
  (global-set-key (kbd "C-x C-p") 'previous-buffer)
  (global-set-key (kbd "C-x C-n") 'next-buffer)
  (global-set-key (kbd "C-x C-k") 'kill-current-buffer)

  (global-set-key (kbd "C-o") 'other-window)
  (global-set-key (kbd "C-0") 'delete-window)
  (global-set-key (kbd "C-1") 'delete-other-windows)
  (global-set-key (kbd "C-2") 'split-window-bellow)
  (global-set-key (kbd "C-3") 'split-window-right)

  (global-set-key (kbd "C-.") 'duplicate-line)
#+end_src

* Org Mode

** General

#+begin_src elisp
  (require 'org-id)
  (require 'org-tempo)

  (global-set-key (kbd "C-c l") 'org-store-link)
  (global-set-key (kbd "C-c a") 'org-agenda)
  (global-set-key (kbd "C-c c") 'org-capture)
  (global-set-key (kbd "C-c b") 'org-switchb)
  (global-set-key (kbd "C-c t") 'org-todo-list)
#+end_src

* Editing

** Multiple Cursors

#+begin_src elisp
  (use-package multiple-cursors
    :config
    (setq mc/always-run-for-all 1)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)
    (define-key mc/keymap (kbd "<return>") nil))
#+end_src

* Coding

** General

#+begin_src elisp
  (setq display-line-numbers-type 'relative)

  (add-hook 'prog-mode-hook 'display-line-numbers-mode)

  (global-set-key (kbd "C-c c") 'compile)
  (global-set-key (kbd "C-c r") 'recompile)
#+end_src

** Direnv

#+begin_src elisp
  (use-package direnv
    :config
    (direnv-mode))
#+end_src

** Haskell

#+begin_src elisp
  (use-package haskell-mode
    :ensure t)

  (require 'haskell-interactive-mode)

  (require 'haskell-process)

  (add-hook 'haskell-mode-hook 'interactive-haskell-mode)

  (define-key haskell-mode-map (kbd "C-c C-l") 'haskell-process-load-or-reload)
  (define-key haskell-mode-map (kbd "C-`") 'haskell-interactive-bring)
  (define-key haskell-mode-map (kbd "C-c C-t") 'haskell-process-do-type)
  (define-key haskell-mode-map (kbd "C-c C-i") 'haskell-process-do-info)
  (define-key haskell-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
  (define-key haskell-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
  (define-key haskell-mode-map (kbd "C-c c") 'haskell-process-cabal)

  (define-key haskell-cabal-mode-map (kbd "C-`") 'haskell-interactive-bring)
  (define-key haskell-cabal-mode-map (kbd "C-c C-k") 'haskell-interactive-mode-clear)
  (define-key haskell-cabal-mode-map (kbd "C-c C-c") 'haskell-process-cabal-build)
  (define-key haskell-cabal-mode-map (kbd "C-c c") 'haskell-process-cabal)

  (custom-set-variables
   '(haskell-process-type 'cabal-repl))
#+end_src

;; Local Variables:
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Reload?")(load-file user-init-file))) nil t)
;; eval: (add-hook 'after-save-hook (lambda ()(if (y-or-n-p "Tangle?")(org-babel-tangle))) nil t)
;; End:
